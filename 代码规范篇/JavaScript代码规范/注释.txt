1.4.1 单行注释
[强制] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。
1.4.2多行注释
[建议] 避免使用 /.../ 这样的多行注释。有多行注释内容时，使用多个单行注释。

1.4.5 文件注释
[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。
示例：
/**
 * @file Describe the file
 */
 
 
 
 /**
 * @author name
 * @description 修改用户名
 */
1.4.6 类注释
[强制] 类的属性或方法等成员信息不是 public 的，应使用 @protected 或 @private 标识可访问性。
解释：
生成的文档中将有可访问性的标记，避免用户直接使用非 public 的属性或方法。
示例：
/**
 * 类描述
 *
 * @class
 * @extends Developer
 */
var Fronteer = function () {
    Developer.call(this);
    /**
     * 属性描述
     *
     * @type {string}
     * @private
     */
    this.level = 'T12';
    // constructor body
};
util.inherits(Fronteer, Developer);
/**
 * 方法描述
 *
 * @private
 * @return {string} 返回值描述
 */
Fronteer.prototype.getLevel = function () {
};
[建议] 使用 @class 标记类或构造函数。
示例：

/**
 * 描述
 *
 * @class
 */
function Developer() {
    // constructor body
}
[建议] 使用 @extends 标记类的继承信息。
示例：
/**
 * 描述
 *
 * @class
 * @extends Developer
 */
function Fronteer() {
    Developer.call(this);
    // constructor body
}
util.inherits(Fronteer, Developer);
1.4.7 函数/方法注释
[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。
解释：
当 return 关键字仅作退出函数/方法使用时，无须对返回值作注释标识。
[强制] 参数和返回值注释必须包含类型信息，且不允许省略参数的说明。
示例：
/**
 * 函数描述
 *
 * @param {string} p1 参数1的说明
 * @param {string} p2 参数2的说明，比较长
 *     那就换行了.
 * @param {number=} p3 参数3的说明（可选）
 * @return {Object} 返回值描述
 */
function foo(p1, p2, p3) {
    var p3 = p3 || 10;
    return {
        p1: p1,
        p2: p2,
        p3: p3
    };
}
[强制] 对 Object 中各项的描述， 必须使用 @param 标识。

示例：

/**
 * 函数描述
 *
 * @param {Object} option 参数描述
 * @param {string} option.url option项描述
 * @param {string=} option.method option项描述，可选参数
 */
function foo(option) {
    // TODO
}
1.4.8 事件注释

[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。

示例：

/**
 * 值变更时触发
 *
 * @event Select#change
 * @param {Object} e e描述
 * @param {string} e.before before描述
 * @param {string} e.after after描述
 */
this.fire(
    'change',
    {
        before: 'foo',
        after: 'bar'
    }
);
[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。

示例：

/**
 * 点击处理
 *
 * @fires Select#change
 * @private
 */
Select.prototype.clickHandler = function () {
    /**
     * 值变更时触发
     *
     * @event Select#change
     * @param {Object} e e描述
     * @param {string} e.before before描述
     * @param {string} e.after after描述
     */
    this.fire(
        'change',
        {
            before: 'foo',
            after: 'bar'
        }
    );
};
1.4.9 常量注释
[强制] 常量必须使用 @const 标记，并包含说明和类型信息。
示例：
/**
 * 常量说明
 *
 * @const
 * @type {string}
 */
var REQUEST_URL = 'myurl.do';
1.4.10 细节注释
[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：
解释：
TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。
FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。
HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。
XXX: 该处存在陷阱。此时需要对陷阱进行描述。