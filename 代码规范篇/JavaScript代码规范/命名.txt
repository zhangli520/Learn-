命名
[强制] 变量 使用 Camel命名法。
示例：
var loadingModules = {};
[强制] jQuery对象变量，使用$作为变量名前缀。
示例：
// good
var $sidebar = $('.sidebar');
------------
// bad
var sidebar = $('.sidebar');
[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。
示例：
var HTML_ENTITY = {};
[强制] 函数 使用 Camel命名法。
示例：
function getStyle(element) {
}
[建议] 函数名 使用 动宾短语。
示例：
function getStyle(element) {
}
[强制] 类 使用 Pascal命名法。
示例：
function TextNode(options) {
}
[强制] 类名 使用 名词。
示例：
function Engine(options) {
}
[强制] 类的 方法 / 属性 使用 Camel命名法。
示例：
function TextNode(value, engine) {
    this.value = value;
    this.engine = engine;
}
TextNode.prototype.clone = function () {
    return this;
};
[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。
示例：

var TargetState = {
    READING: 1,
    READED: 2,
    APPLIED: 3,
    READY: 4
};
[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。
示例：
function XMLParser() {
}
function insertHTML(element, html) {
}
var httpRequest = new HTTPRequest();
[建议] boolean 类型的变量使用 is 或 has 开头。
示例：
var isReady = false;
var hasMoreCommands = false;
[建议] Promise对象 用 动宾短语的进行时 表达。
示例：
var loadingData = ajax.get('url');
loadingData.then(callback);
[建议] 不保存this引用，使用Function#bind。
示例：
// good
function () {
    return function () {
        console.log(this);
    }.bind(this);
}
// bad
function () {
    var self = this;
    return function () {
        console.log(self);
    };
}
// bad
function () {
    var that = this;
    return function () {
        console.log(that);
    };
}